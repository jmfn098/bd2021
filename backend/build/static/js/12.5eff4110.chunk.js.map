{"version":3,"sources":["services/auth.service.js","pages/Login/Login.js"],"names":["API_URL","process","register","username","email","password","axios","post","login","correo","a","cedula","then","response","data","token","localStorage","setItem","JSON","stringify","logout","removeItem","getCurrentUser","parse","getItem","required","value","className","role","Login","props","form","useRef","checkBtn","from","useLocation","state","pathname","user","useSelector","useState","setUsername","setPassword","loading","setLoading","message","setMessage","handleLogin","e","preventDefault","current","validateAll","context","_errors","length","AuthService","history","push","window","location","reload","error","resMessage","toString","to","md","onSubmit","ref","method","name","type","placeholder","autoComplete","onChange","target","validations","color","disabled","onClick","style","display"],"mappings":"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","file":"static/js/12.5eff4110.chunk.js","sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\nimport axios from \"axios\";\nlet baseURL = process.env.REACT_APP_DEV_PROXY;\nif (process.env.REACT_APP_ENV === \"production\") {\n  baseURL = process.env.REACT_APP_PROD_PROXY;\n}\nconst API_URL = `${baseURL}/api/auth/`;\n\nconst register = (username, email, password) => {\n  return axios.post(API_URL + \"signup\", {\n    username,\n    email,\n    password,\n  });\n};\n\nconst login = async (correo, password) => {\n  return axios\n    .post(API_URL + \"signin\", {\n      cedula: correo,\n      password: password,\n    })\n    .then((response) => {\n      if (response.data.token) {\n        localStorage.setItem(\"userComunidad\", JSON.stringify(response.data));\n      }\n\n      return response.data;\n    });\n};\n\nconst logout = () => {\n  localStorage.removeItem(\"user\");\n};\n\nconst getCurrentUser = () => {\n  return JSON.parse(localStorage.getItem(\"user\"));\n};\n\nexport default {\n  register,\n  login,\n  logout,\n  getCurrentUser,\n};\n","import React, { useState, useRef } from \"react\";\nimport Form from \"react-validation/build/form\";\nimport CheckButton from \"react-validation/build/button\";\nimport { Redirect, useLocation } from \"react-router-dom\";\nimport AuthService from \"../../services/auth.service\";\nimport { useSelector } from \"react-redux\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CContainer,\n  CInput,\n  CInputGroup,\n  CInputGroupPrepend,\n  CInputGroupText,\n  CRow,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\n\nconst required = (value) => {\n  if (!value) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        This field is required!\n      </div>\n    );\n  }\n};\n\nconst Login = (props) => {\n  const form = useRef();\n  const checkBtn = useRef();\n  const { state } = useLocation();\n  const { from } = state || { from: { pathname: \"/\" } };\n  const user = useSelector((state) => state.user);\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const onChangeUsername = (e) => {\n    const username = e.target.value;\n    setUsername(username);\n  };\n  const onChangePassword = (e) => {\n    const password = e.target.value;\n    setPassword(password);\n  };\n\n  const handleLogin = (e) => {\n    e.preventDefault();\n\n    setMessage(\"\");\n    setLoading(true);\n\n    form.current.validateAll();\n\n    if (checkBtn.current.context._errors.length === 0) {\n      AuthService.login(username, password).then(\n        () => {\n          props.history.push(\"/\");\n          window.location.reload();\n        },\n        (error) => {\n          const resMessage =\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString();\n\n          setLoading(false);\n          setMessage(resMessage);\n        }\n      );\n    } else {\n      setLoading(false);\n    }\n  };\n  if (user !== null) {\n    return <Redirect to={from} />;\n  }\n  return (\n    <div className=\"c-app c-default-layout flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md=\"4\">\n            <CCardGroup>\n              <CCard className=\"p-4\">\n                <CCardBody>\n                  <Form onSubmit={handleLogin} ref={form} method=\"POST\">\n                    <div className=\"h2\">Iniciar sesión</div>\n                    <p className=\"text-muted\">Acceda a su cuenta</p>\n                    <CInputGroup className=\"mb-3\">\n                      <CInputGroupPrepend>\n                        <CInputGroupText>\n                          <CIcon name=\"cil-user\" />\n                        </CInputGroupText>\n                      </CInputGroupPrepend>\n                      <CInput\n                        type=\"text\"\n                        className=\"form-control\"\n                        placeholder=\"Cédula\"\n                        autoComplete=\"username\"\n                        name=\"username\"\n                        value={username}\n                        onChange={onChangeUsername}\n                        validations={[required]}\n                      />\n                    </CInputGroup>\n                    <CInputGroup className=\"mb-4\">\n                      <CInputGroupPrepend>\n                        <CInputGroupText>\n                          <CIcon name=\"cil-lock-locked\" />\n                        </CInputGroupText>\n                      </CInputGroupPrepend>\n                      <CInput\n                        type=\"password\"\n                        className=\"form-control\"\n                        name=\"password\"\n                        value={password}\n                        onChange={onChangePassword}\n                        validations={[required]}\n                        placeholder=\"Contraseña\"\n                        autoComplete=\"current-password\"\n                      />\n                    </CInputGroup>\n\n                    <CButton\n                      color=\"primary\"\n                      className=\"w-100\"\n                      disabled={loading}\n                      onClick={handleLogin}\n                    >\n                      {loading && (\n                        <span className=\"spinner-border spinner-border-sm mx-1\"></span>\n                      )}\n                      <span>Iniciar sesión</span>\n                    </CButton>\n\n                    {message && (\n                      <div\n                        className=\"form-group\"\n                        onClick={() => {\n                          setMessage(\"\");\n                        }}\n                      >\n                        <div className=\"alert alert-danger\" role=\"alert\">\n                          {message}\n                        </div>\n                      </div>\n                    )}\n                    <CheckButton\n                      style={{ display: \"none\" }}\n                      className=\"my-auto w-100\"\n                      ref={checkBtn}\n                    />\n                  </Form>\n                </CCardBody>\n              </CCard>\n            </CCardGroup>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  );\n};\n\nexport default Login;\n"],"sourceRoot":""}